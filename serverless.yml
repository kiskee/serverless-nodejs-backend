# "org" ensures this Service is used with the correct Serverless Framework Access Key.
org: emasprotrader
# "service" is the name of this project. This will also be added to your AWS resource names.
service: testTwo

provider:
  name: aws
  runtime: nodejs20.x
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}
  environment:
    USERS_TABLE: ${self:service}-${self:provider.stage}-users
    JWT_SECRET: ${env:JWT_SECRET}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - !GetAtt UsersTable.Arn
        - arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USERS_TABLE}/index/*

functions:
  users:
    handler: users/usersController.handler
    events:
      - http:
          path: users
          method: post
          cors: true
      - http:
          path: users
          method: get
          cors: true
      - http:
          path: users/{id}
          method: get
          cors: true
      - http:
          path: users/email/{email}
          method: get
          cors: true
          request:
            parameters:
              paths:
                email: true
      - http:
          path: users/{id}
          method: put
          cors: true
      - http:
          path: users/{id}
          method: delete
          cors: true
  auth:
    handler: auth/authController.handler
    events:
      - http:
          path: auth/login
          method: post
          cors: true
      - http:
          path: auth/login-google
          method: post
          cors: true
      - http:
          path: auth/logout
          method: post
          cors: true
      - http:
          path: auth/renew-token
          method: post
          cors: true
      - http:
          path: auth/signature
          method: get
          cors: true
      - http:
          path: auth/forgot-password/{email}
          method: post
          cors: true
          request:
            parameters:
              paths:
                email: true
      - http:
          path: auth/reset-password
          method: post
          cors: true
          

resources:
  Resources:
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.USERS_TABLE}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: email
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: EmailIndex
            KeySchema:
              - AttributeName: email
                KeyType: HASH
            Projection:
              ProjectionType: ALL
